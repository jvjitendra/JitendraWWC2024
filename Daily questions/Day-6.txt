#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

pair<int, int> closestToZero(vector<int>& arr) {
    sort(arr.begin(), arr.end()); // Step 1: Sort the array

    int left = 0, right = arr.size() - 1;
    int closestSum = INT_MAX;
    pair<int, int> result;

    while (left < right) {
        int sum = arr[left] + arr[right];

        // Update closest sum and result pair
        if (abs(sum) < abs(closestSum)) {
            closestSum = sum;
            result = {arr[left], arr[right]};
        }

        // If two sums are equally close to 0, prefer the positive sum
        if (abs(sum) == abs(closestSum) && sum > closestSum) {
            result = {arr[left], arr[right]};
        }

        // Move pointers based on the sum
        if (sum < 0) {
            left++; // Increase the sum
        } else {
            right--; // Decrease the sum
        }
    }

    return result;
}

int main() {
    vector<int> arr = {-8, -66, -60, 10, 50, 14, -3};

    pair<int, int> result = closestToZero(arr);

    cout << "Pair closest to zero: (" << result.first << ", " << result.second << ")" << endl;

    return 0;
}

Input:
arr = {-8, -66, -60, 10, 50, 14, -3}

Output:
Pair closest to zero: (-8, 10)
/
/
#include <iostream>
#include <vector>
using namespace std;

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    if (matrix.empty() || matrix[0].empty()) return false;

    int m = matrix.size();    // Number of rows
    int n = matrix[0].size(); // Number of columns

    int low = 0, high = m * n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        int row = mid / n;
        int col = mid % n;
        int midValue = matrix[row][col];

        if (midValue == target) {
            return true;
        } else if (midValue < target) {
            low = mid + 1; // Search in the right half
        } else {
            high = mid - 1; // Search in the left half
        }
    }

    return false; // Target not found
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 5, 7},
        {10, 11, 16, 20},
        {23, 30, 34, 60}
    };
    int target = 3;

    if (searchMatrix(matrix, target)) {
        cout << "Target " << target << " found in the matrix." << endl;
    } else {
        cout << "Target " << target << " not found in the matrix." << endl;
    }

    return 0;
}

Input:
matrix = [
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 60]
]
target = 3

Ouput:
Target 3 found in the matrix.
/
/
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, vector<int>> HeapNode; // (current sum, indices of elements in each row)

int kthSmallestSum(vector<vector<int>>& matrix, int k) {
    int m = matrix.size(); // Number of rows
    int n = matrix[0].size(); // Number of columns

    // Min-heap to store (current sum, indices of elements in each row)
    priority_queue<HeapNode, vector<HeapNode>, greater<>> minHeap;

    // Initialize heap with the smallest sum (first elements of each row)
    int initialSum = 0;
    vector<int> initialIndices(m, 0); // Start with the first element of each row
    for (int i = 0; i < m; ++i) {
        initialSum += matrix[i][0];
    }
    minHeap.push({initialSum, initialIndices});

    // Set to track visited combinations to avoid duplicates
    set<vector<int>> visited;
    visited.insert(initialIndices);

    // Extract k times to get the k-th smallest sum
    for (int count = 1; count < k; ++count) {
        auto [currentSum, indices] = minHeap.top();
        minHeap.pop();

        // Generate new sums by moving one index forward in each row
        for (int i = 0; i < m; ++i) {
            if (indices[i] + 1 < n) { // Check if we can move to the next column in row i
                vector<int> newIndices = indices;
                newIndices[i]++; // Move one step in row i

                if (visited.find(newIndices) == visited.end()) {
                    int newSum = currentSum - matrix[i][indices[i]] + matrix[i][newIndices[i]];
                    minHeap.push({newSum, newIndices});
                    visited.insert(newIndices); // Mark this combination as visited
                }
            }
        }
    }

    // The top element is the k-th smallest sum
    return minHeap.top().first;
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 11},
        {2, 4, 6},
        {5, 8, 9}
    };
    int k = 5;

    cout << "The " << k << "-th smallest sum is: " << kthSmallestSum(matrix, k) << endl;

    return 0;
}

Input:
matrix = [
  [1, 3, 11],
  [2, 4, 6],
  [5, 8, 9]
]
k = 5

Output:
The 5-th smallest sum is: 15