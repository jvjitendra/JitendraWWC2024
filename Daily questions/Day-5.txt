#include <iostream>
using namespace std;

int linearSearch(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target) {
            return i; // Return the index of the target
        }
    }
    return -1; // Return -1 if the target is not found
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 30;

    int result = linearSearch(arr, n, target);

    if (result != -1) {
        cout << "Number " << target << " found at index " << result << endl;
    } else {
        cout << "Number " << target << " not found in the array." << endl;
    }

    return 0;
}

Output : 
Number 30 found at index 2
/
/
#include <iostream>
using namespace std;

int binarySearch(int arr[], int n, int target) {
    int left = 0, right = n - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            return mid; // Target found
        } else if (arr[mid] < target) {
            left = mid + 1; // Search in the right half
        } else {
            right = mid - 1; // Search in the left half
        }
    }

    return -1; // Return -1 if the target is not found
}

int main() {
    int arr[] = {10, 20, 30, 40, 50}; // Sorted array
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 30;

    int result = binarySearch(arr, n, target);

    if (result != -1) {
        cout << "Number " << target << " found at index " << result << endl;
    } else {
        cout << "Number " << target << " not found in the array." << endl;
    }

    return 0;
}

Output :
Number 30 found at index 2
/
/
#include <iostream>
#include <vector>
#include <algorithm> // For std::sort
using namespace std;

vector<int> targetIndices(vector<int>& nums, int target) {
    // Step 1: Sort the array
    sort(nums.begin(), nums.end());

    // Step 2: Collect indices of target values
    vector<int> result;
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] == target) {
            result.push_back(i);
        }
    }

    return result;
}

int main() {
    vector<int> nums = {1, 2, 5, 2, 3};
    int target = 2;

    vector<int> indices = targetIndices(nums, target);

    // Output the result
    if (!indices.empty()) {
        cout << "Target indices: ";
        for (int index : indices) {
            cout << index << " ";
        }
        cout << endl;
    } else {
        cout << "Target not found in the array." << endl;
    }

    return 0;
}

Input :
nums = [1, 2, 5, 2, 3]
target = 2

Output:
Target indices: 1 2
/
/
#include <iostream>
#include <stack>
using namespace std;

bool isValid(string s) {
    stack<char> st;

    for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            // Push opening brackets onto the stack
            st.push(c);
        } else {
            // For closing brackets, check for matching opening brackets
            if (st.empty()) {
                return false; // No matching opening bracket
            }
            char top = st.top();
            if ((c == ')' && top == '(') ||
                (c == '}' && top == '{') ||
                (c == ']' && top == '[')) {
                st.pop(); // Matching pair found, pop the stack
            } else {
                return false; // Mismatched pair
            }
        }
    }

    // If the stack is empty, all brackets are matched
    return st.empty();
}

int main() {
    string s = "{[()]}"; // Example input

    if (isValid(s)) {
        cout << "The string has valid parentheses." << endl;
    } else {
        cout << "The string does not have valid parentheses." << endl;
    }

    return 0;
}

Input:
s = "{[()]}"

Ouput:
The string has valid parentheses.
/
/
#include <iostream>
#include <vector>
using namespace std;

int searchInRotatedSortedArray(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (nums[mid] == target) {
            return mid; // Target found
        }

        // Check if the left half is sorted
        if (nums[low] <= nums[mid]) {
            // If target lies within the left sorted half
            if (nums[low] <= target && target < nums[mid]) {
                high = mid - 1; // Search in the left half
            } else {
                low = mid + 1; // Search in the right half
            }
        }
        // Otherwise, the right half is sorted
        else {
            // If target lies within the right sorted half
            if (nums[mid] < target && target <= nums[high]) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }
    }

    return -1; // Target not found
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    int target = 0;

    int result = searchInRotatedSortedArray(nums, target);

    if (result != -1) {
        cout << "Target " << target << " found at index " << result << "." << endl;
    } else {
        cout << "Target " << target << " not found in the array." << endl;
    }

    return 0;
}

Input:
nums = {4, 5, 6, 7, 0, 1, 2}
target = 0

Output:
Target 0 found at index 4.

